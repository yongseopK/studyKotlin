package chap04
/*
    리플렉션

    프로그램 실행중에 프로그램의 구조와 동작을 검사하고 수정할 수 있는 기능을 뜻함.
    리플렉션을 사용하면 런타임에 클래스, 인터페이스, 메서드, 속성 등에 대한 정보를
    얻어내고, 해당 요소들을 동작으로 호출하거나 수정할 수 있음

    용도
    1. 런타임에 클래스 정보 검사
        - 클래스의 이름, 패키지, 상위 클래스, 인터페이스 등의 정보를 얻을 수 있음
        - 클래스의 메서드, 생성자, 속성 등을 검사할 수 있음
    2. 동적으로 객체 생성 및 메서드 호출
        - 런타임에 클래스 이름이나 메서드 이름을 알고 있다면, 해당 클래스의 객체를
          동작으로 생성하거나 메서드를 호출할 수 있음
        - 이를 통해 플러그인 시스템, 동적 로딩, 의존성 주입 등을 구현할 수 있음
    3. 애너테이션 정보 검사
        - 런타임에 클래스, 메서드, 속성 등에 적용된 애너테이션 정보를 검사할 수 있음
        - 이를 통해 애너테이션 기반의 동작을 구현하거나, 메타데이터를 활용할 수 있음
    4. 직렬화와 역직렬화
        - 리플렉션을 사용하면 객체의 구조를 분석하여 직렬화하거나, 직렬화된 데이터를
          역직렬화하여 객체로 복원할 수 있음

     * 과도한 사용은 코드의 복잡성을 증가시키고, 성능에 영향을 줄 수 있음
 */
class MyClass1 {
    fun myMethod(value: Int) {
        println("Value : $value")
    }
}

fun main() {
    val kClass = MyClass1::class
    println("Class name : ${kClass.simpleName}")

    val methods = kClass.members
    println("Member functions : ")
    methods.forEach { println(it.name) }
}